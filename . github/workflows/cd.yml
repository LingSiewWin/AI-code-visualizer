name: Continuous Deployment

on:
  push:
    branches:
      - main
      - develop
      - staging
    tags:
      - 'v*'
  
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed
    branches:
      - main
      - develop

  # Allow manual deployment
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip tests before deployment'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Only run if CI passed (for workflow_run trigger) or for direct pushes
  check-ci:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      environment: ${{ steps.check.outputs.environment }}
    steps:
      - name: Check if deployment should proceed
        id: check
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            if [ "${{ github.event.workflow_run.conclusion }}" = "success" ]; then
              echo "should-deploy=true" >> $GITHUB_OUTPUT
            else
              echo "should-deploy=false" >> $GITHUB_OUTPUT
              echo "CI failed, skipping deployment"
              exit 0
            fi
          else
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          fi
          
          # Determine environment based on branch/tag
          if [[ "${{ github.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

  # Build and push Docker images
  build-and-push:
    needs: check-ci
    if: needs.check-ci.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-image: ${{ steps.meta-backend.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Extract metadata for Backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

  # Deploy to Vercel (Frontend)
  deploy-vercel:
    needs: [check-ci, build-and-push]
    if: needs.check-ci.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.check-ci.outputs.environment }}
      url: ${{ steps.deploy.outputs.preview-url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          VITE_API_URL: ${{ secrets.API_URL }}
          VITE_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: ${{ needs.check-ci.outputs.environment == 'production' && '--prod' || '' }}

  # Deploy to AWS ECS (Backend)
  deploy-aws:
    needs: [check-ci, build-and-push]
    if: needs.check-ci.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    environment: ${{ needs.check-ci.outputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ secrets.ECS_TASK_DEFINITION }} \
            --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ secrets.CONTAINER_NAME }}
          image: ${{ needs.build-and-push.outputs.backend-image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true

  # Deploy to Railway (Alternative backend deployment)
  deploy-railway:
    needs: [check-ci, build-and-push]
    if: needs.check-ci.outputs.should-deploy == 'true' && github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to Railway
        uses: railwayapp/railway-deploy@v2
        with:
          token: ${{ secrets.RAILWAY_TOKEN }}
          service: ai-code-visualizer-backend
          environment: ${{ needs.check-ci.outputs.environment }}

  # Health check after deployment
  health-check:
    needs: [deploy-vercel, deploy-aws]
    if: always() && (needs.deploy-vercel.result == 'success' || needs.deploy-aws.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Health check Frontend
        if: needs.deploy-vercel.result == 'success'
        run: |
          echo "Checking frontend health..."
          for i in {1..10}; do
            if curl -f -s "${{ needs.deploy-vercel.outputs.preview-url || secrets.FRONTEND_URL }}"; then
              echo "Frontend is healthy!"
              break
            fi
            echo "Attempt $i failed, retrying in 30 seconds..."
            sleep 30
          done

      - name: Health check Backend
        if: needs.deploy-aws.result == 'success'
        run: |
          echo "Checking backend health..."
          for i in {1..10}; do
            if curl -f -s "${{ secrets.BACKEND_URL }}/health"; then
              echo "Backend is healthy!"
              break
            fi
            echo "Attempt $i failed, retrying in 30 seconds..."
            sleep 30
          done

  # Smoke tests after deployment
  smoke-tests:
    needs: [health-check, check-ci]
    if: always() && needs.health-check.result == 'success'
    runs-on: ubuntu-latest
    environment: ${{ needs.check-ci.outputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run smoke tests
        run: npm run test:smoke
        env:
          TEST_URL: ${{ secrets.FRONTEND_URL }}
          API_URL: ${{ secrets.BACKEND_URL }}

  # Database migrations (if needed)
  migrate-database:
    needs: [check-ci, deploy-aws]
    if: needs.check-ci.outputs.should-deploy == 'true' && needs.deploy-aws.result == 'success'
    runs-on: ubuntu-latest
    environment: ${{ needs.check-ci.outputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd server
          npm ci

      - name: Run database migrations
        run: |
          cd server
          npm run migrate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  # Notify team about deployment
  notify:
    needs: [check-ci, deploy-vercel, deploy-aws, health-check]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify Slack on success
        if: needs.deploy-vercel.result == 'success' && needs.deploy-aws.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          message: |
            🚀 Deployment successful!
            Environment: ${{ needs.check-ci.outputs.environment }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Frontend: ${{ needs.deploy-vercel.outputs.preview-url }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          message: |
            ❌ Deployment failed!
            Environment: ${{ needs.check-ci.outputs.environment }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Create GitHub release for production deployments
  create-release:
    needs: [check-ci, deploy-vercel, deploy-aws]
    if: needs.check-ci.outputs.environment == 'production' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Changes in this Release
            - Automated release from CD pipeline
            - Frontend deployed to: ${{ needs.deploy-vercel.outputs.preview-url }}
            - Backend deployed to: ${{ secrets.BACKEND_URL }}
            
            ## Deployment Details
            - Build: ${{ github.run_number }}
            - Commit: ${{ github.sha }}
            - Environment: Production
          draft: false
          prerelease: false