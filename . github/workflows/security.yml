name: Security Audit

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - secrets
          - containers
          - code-analysis

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.9'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Install backend dependencies
        run: |
          cd server
          npm ci

      - name: Run npm audit (Frontend)
        run: |
          echo "## Frontend Security Audit" >> $GITHUB_STEP_SUMMARY
          npm audit --audit-level=moderate --json > frontend-audit.json || true
          if [ -s frontend-audit.json ]; then
            echo "### Vulnerabilities Found:" >> $GITHUB_STEP_SUMMARY
            cat frontend-audit.json | jq -r '.vulnerabilities | to_entries[] | "- **\(.key)**: \(.value.severity) - \(.value.title)"' >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No vulnerabilities found in frontend dependencies" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Run npm audit (Backend)
        run: |
          cd server
          echo "## Backend Security Audit" >> $GITHUB_STEP_SUMMARY
          npm audit --audit-level=moderate --json > ../backend-audit.json || true
          if [ -s ../backend-audit.json ]; then
            echo "### Vulnerabilities Found:" >> $GITHUB_STEP_SUMMARY
            cat ../backend-audit.json | jq -r '.vulnerabilities | to_entries[] | "- **\(.key)**: \(.value.severity) - \(.value.title)"' >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No vulnerabilities found in backend dependencies" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=package.json

      - name: Run Snyk for backend
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=server/package.json

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

  # Secret scanning and detection
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/truffleHog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Detect hardcoded secrets
        run: |
          echo "## Secret Detection Results" >> $GITHUB_STEP_SUMMARY
          
          # Check for common secret patterns
          echo "### Scanning for common secret patterns..." >> $GITHUB_STEP_SUMMARY
          
          # API keys
          if grep -r -i "api[_-]key\s*=" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" --include="*.json" . | grep -v node_modules | grep -v .git; then
            echo "⚠️ Potential API keys found" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Passwords
          if grep -r -i "password\s*=" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" . | grep -v node_modules | grep -v .git | grep -v "password.*process.env" | grep -v "password.*config"; then
            echo "⚠️ Potential hardcoded passwords found" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Tokens
          if grep -r -i "token\s*=" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" . | grep -v node_modules | grep -v .git | grep -v "token.*process.env" | grep -v "token.*config"; then
            echo "⚠️ Potential hardcoded tokens found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "✅ Secret scanning completed" >> $GITHUB_STEP_SUMMARY

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'containers' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    permissions:
      contents: read
      security-events: write
    strategy:
      matrix:
        image: [frontend, backend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          if [ "${{ matrix.image }}" = "frontend" ]; then
            docker build -t ai-code-visualizer-frontend:latest -f Dockerfile --target frontend .
          else
            docker build -t ai-code-visualizer-backend:latest -f server/Dockerfile server/
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ai-code-visualizer-${{ matrix.image }}:latest'
          format: 'sarif'
          output: 'trivy-${{ matrix.image }}-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.image }}-results.sarif'

      - name: Run Snyk to check Docker image for vulnerabilities
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: 'ai-code-visualizer-${{ matrix.image }}:latest'
          args: --file=Dockerfile --severity-threshold=high

      - name: Upload Snyk Docker results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

  # Static code analysis
  code-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'code-analysis' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-and-quality

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci

      - name: Build the application
        run: |
          npm run build
          cd server && npm run build || true

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

      - name: Run ESLint security rules
        run: |
          echo "## ESLint Security Analysis" >> $GITHUB_STEP_SUMMARY
          
          # Install security plugins
          npm install --no-save eslint-plugin-security eslint-plugin-no-secrets
          
          # Run ESLint with security rules
          npx eslint . --ext .js,.jsx,.ts,.tsx \
            --config .eslintrc.json \
            --plugin security \
            --plugin no-secrets \
            --rule "security/detect-object-injection: error" \
            --rule "security/detect-non-literal-fs-filename: error" \
            --rule "security/detect-eval-with-expression: error" \
            --rule "security/detect-no-csrf-before-method-override: error" \
            --rule "no-secrets/no-secrets: error" \
            --format json > eslint-security.json || true
          
          if [ -s eslint-security.json ]; then
            echo "### Security Issues Found:" >> $GITHUB_STEP_SUMMARY
            cat eslint-security.json | jq -r '.[] | .messages[] | "- **\(.ruleId)**: \(.message) (Line: \(.line))"' >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No security issues found in code analysis" >> $GITHUB_STEP_SUMMARY
          fi

  # OWASP ZAP security testing
  owasp-zap:
    name: OWASP ZAP Security Test
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install and build application
        run: |
          npm ci
          npm run build

      - name: Start application for testing
        run: |
          npm run preview &
          sleep 30
        env:
          VITE_API_URL: http://localhost:3000

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:4173'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Upload ZAP results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install license checker
        run: npm install -g license-checker

      - name: Check frontend licenses
        run: |
          echo "## License Compliance Report" >> $GITHUB_STEP_SUMMARY
          echo "### Frontend Dependencies:" >> $GITHUB_STEP_SUMMARY
          
          npm ci
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;Unlicense;WTFPL' --json > frontend-licenses.json || true
          
          if [ -s frontend-licenses.json ]; then
            echo "✅ All frontend licenses are compliant" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ License compliance issues found in frontend" >> $GITHUB_STEP_SUMMARY
            license-checker --summary >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check backend licenses
        run: |
          echo "### Backend Dependencies:" >> $GITHUB_STEP_SUMMARY
          
          cd server
          npm ci
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;Unlicense;WTFPL' --json > ../backend-licenses.json || true
          
          if [ -s ../backend-licenses.json ]; then
            echo "✅ All backend licenses are compliant" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ License compliance issues found in backend" >> $GITHUB_STEP_SUMMARY
            license-checker --summary >> $GITHUB_STEP_SUMMARY
          fi

  # Security policy compliance
  security-policy:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check security policy files
        run: |
          echo "## Security Policy Compliance" >> $GITHUB_STEP_SUMMARY
          
          # Check for security policy
          if [ -f "SECURITY.md" ]; then
            echo "✅ SECURITY.md found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ SECURITY.md not found - consider adding one" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for proper .gitignore
          if grep -q "node_modules" .gitignore && grep -q "*.env" .gitignore; then
            echo "✅ .gitignore properly configured" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ .gitignore may be missing important entries" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for environment variable usage
          if grep -r "process.env" --include="*.js" --include="*.jsx" src/ server/ | head -5; then
            echo "✅ Environment variables are being used properly" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Consider using environment variables for configuration" >> $GITHUB_STEP_SUMMARY
          fi

  # Aggregate security report
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, container-scan, code-analysis, license-check, security-policy]
    if: always()
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Generate security summary
        run: |
          echo "# 🔒 Security Audit Summary" >> $GITHUB_STEP_SUMMARY
          echo "## Scan Results:" >> $GITHUB_STEP_SUMMARY
          
          # Check job statuses
          if [ "${{ needs.dependency-scan.result }}" = "success" ]; then
            echo "✅ Dependency scan completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Dependency scan failed or had issues" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.secret-scan.result }}" = "success" ]; then
            echo "✅ Secret detection completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Secret detection failed or found issues" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.container-scan.result }}" = "success" ]; then
            echo "✅ Container security scan completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Container security scan failed or found issues" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.code-analysis.result }}" = "success" ]; then
            echo "✅ Code analysis completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Code analysis failed or found issues" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.license-check.result }}" = "success" ]; then
            echo "✅ License compliance check passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ License compliance issues found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "## Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "- Review the Security tab for detailed findings" >> $GITHUB_STEP_SUMMARY
          echo "- Address any high-severity vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- Update dependencies with known vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- Review and rotate any exposed secrets" >> $GITHUB_STEP_SUMMARY

      - name: Notify team of security issues
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security'
          message: |
            🚨 Security scan detected issues!
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Check the Security tab: ${{ github.server_url }}/${{ github.repository }}/security
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}